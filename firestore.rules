rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is admin by email
    function isAdminByEmail() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/admin_allowed_emails/$(request.auth.token.email)) &&
             get(/databases/$(database)/documents/admin_allowed_emails/$(request.auth.token.email)).data.active == true;
    }

    // User Profiles Collection
    match /user_profiles/{profileId} {
      allow read: if isOwner(resource.data.user_id);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.user_id;
      allow update: if isOwner(resource.data.user_id);
      allow delete: if isOwner(resource.data.user_id);
    }

    // Bank Accounts Collection
    match /bank_accounts/{accountId} {
      allow read: if isOwner(resource.data.user_id);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.user_id;
      allow update: if isOwner(resource.data.user_id)
                    && request.resource.data.user_id == resource.data.user_id;
      allow delete: if false;
    }

    // Virtual Cards Collection
    match /virtual_cards/{cardId} {
      allow read: if isOwner(resource.data.user_id);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.user_id;
      allow update: if isOwner(resource.data.user_id)
                    && request.resource.data.user_id == resource.data.user_id;
      allow delete: if isOwner(resource.data.user_id);
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.user_id);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.user_id;
      allow update: if isOwner(resource.data.user_id)
                    && request.resource.data.amount == resource.data.amount
                    && request.resource.data.user_id == resource.data.user_id;
      allow delete: if false;
    }

    // User Settings Collection
    match /user_settings/{settingsId} {
      allow read: if isOwner(resource.data.user_id);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.user_id;
      allow update: if isOwner(resource.data.user_id)
                    && request.resource.data.user_id == resource.data.user_id;
      allow delete: if isOwner(resource.data.user_id);
    }

    // User Sessions Collection
    match /user_sessions/{sessionId} {
      allow read: if isOwner(resource.data.user_id);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.user_id;
      allow update: if isOwner(resource.data.user_id);
      allow delete: if isOwner(resource.data.user_id);
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.user_id);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.user_id;
      allow update: if isOwner(resource.data.user_id)
                    && request.resource.data.user_id == resource.data.user_id;
      allow delete: if isOwner(resource.data.user_id);
    }

    // Documents Collection
    match /documents/{documentId} {
      allow read: if isOwner(resource.data.user_id);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.user_id;
      allow update: if isOwner(resource.data.user_id)
                    && request.resource.data.user_id == resource.data.user_id;
      allow delete: if isOwner(resource.data.user_id);
    }

    // Recipients Collection
    match /recipients/{recipientId} {
      allow read: if isOwner(resource.data.user_id);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.user_id;
      allow update: if isOwner(resource.data.user_id)
                    && request.resource.data.user_id == resource.data.user_id;
      allow delete: if isOwner(resource.data.user_id);
    }

    // Backup Codes Collection
    match /backup_codes/{codeId} {
      allow read: if isOwner(resource.data.user_id);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.user_id;
      allow update: if isOwner(resource.data.user_id)
                    && request.resource.data.user_id == resource.data.user_id;
      allow delete: if isOwner(resource.data.user_id);
    }

    // Agents Collection
    match /agents/{agentId} {
      allow read: if isOwner(resource.data.user_id);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.user_id;
      allow update: if isOwner(resource.data.user_id)
                    && request.resource.data.user_id == resource.data.user_id;
      allow delete: if isOwner(resource.data.user_id);
    }

    // Verification Codes Collection
    match /verification_codes/{codeId} {
      allow read: if isOwner(resource.data.user_id);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.user_id;
      allow update: if isOwner(resource.data.user_id)
                    && request.resource.data.user_id == resource.data.user_id;
      allow delete: if false;
    }

    // Admin Allowed Emails Collection
    match /admin_allowed_emails/{email} {
      allow read: if isAdminByEmail();
      allow create, update, delete: if isAdminByEmail();
    }

    // Admin Access Audit Log Collection
    match /admin_access_audit_log/{logId} {
      allow read: if isAdminByEmail();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }

    // Default: Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
